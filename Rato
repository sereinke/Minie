import java.applet.Applet;
import java.applet.AudioClip;
import java.io.File;

/**
 * class Rato Carrega o o labirinto e guarda em Elemento
 * 
 * @author maricleia.vieira
 * @version 1.0
 */
public class Rato extends Elemento {
	public Labirinto getLab() {
		return lab;
	}

	public void setLab(Labirinto lab) {
		this.lab = lab;
	}

	public static final String CARACTER = "M";
	private Labirinto lab;
	private boolean achouSaida;

	public Rato(Posicao posicao) {
		super(posicao);
		this.achouSaida = false;
	}

	public Rato() {

	}

	@Override
	public String getValue() {
		return CARACTER;
	}

	/**
	 * AchouSaida se o rato achou o caracter E return um true e imprime achou
	 * saida
	 * 
	 * @author maricleia.vieira
	 * @version 1.0
	 */
	public boolean achouSaida() {
		return this.achouSaida;
	}

	/**
	 * andar Imprime o labirinto, carrega as colunas e as linhas, usa um boolean
	 * para descer, subir, direita, esquerda, se não pode caminhar == achou
	 * saida, caso contrario desce, sobe, direita ou esquerda.
	 * 
	 * @author maricleia.vieira
	 * @version 1.0
	 */
	public void andar() throws Exception {

		LabirintoFrame.instnceOf().createFrame(this.lab.toJpanel());
		int colunaAnt = lab.getColunaAnterior();
		int linhaAnt = lab.getLinhaAnterior();
		int colunaAtual = lab.getRatoColuna();
		int linhaAtual = lab.getRatoLinha();

		boolean desceu = ((linhaAtual > linhaAnt) || linhaAnt == -1);
		boolean subui = (linhaAtual < linhaAnt);
		boolean direita = (colunaAtual > colunaAnt);
		boolean esquerda = (colunaAtual < colunaAnt);

		boolean caminhou = true;

		caminhou = verificarDirecoes(colunaAtual, linhaAtual, desceu, subui,
				direita, esquerda, caminhou);
		lab.setLinhaAnterior(linhaAtual);
		lab.setColunaAnterior(colunaAtual);

		if (caminhou) {
			andar();
		}

	}

	private boolean verificarDirecoes(int colunaAtual, int linhaAtual,
			boolean desceu, boolean subir, boolean direita, boolean esquerda,
			boolean caminhou) throws Exception {
		
		if (lab.getPosicao(linhaAtual, colunaAtual).getCaracter()== "C"){
			lab.getPosicao(linhaAtual, colunaAtual).setCaminho();
			
			AudioClip RatoComeu = Applet.newAudioClip(new File(
					"data/death_2.wav").toURL());
			RatoComeu.play();
			
			try {
			    Thread.sleep(1000);
			} catch(InterruptedException ex) {
			    ex.printStackTrace();
			}
		}

		if (lab.getPosicao(linhaAtual, colunaAtual).getCaracter()
				.equalsIgnoreCase("E")) {
			caminhou = false;
			achouSaida = true;
			AudioClip RatoGanhou = Applet.newAudioClip(new File(
					"data/death_2.wav").toURL());
			RatoGanhou.play();
			System.out.println("Parabéns!");

		} else if (desceu) {
			/**
			 * Antes havia um trecho longo de codigo, usamos o refactor extract
			 * method
			 */
			caminhou = descer(colunaAtual, linhaAtual, caminhou);
		} else if (subir) {
			caminhou = subir(colunaAtual, linhaAtual, caminhou);

		} else if (direita) {
			caminhou = direita(colunaAtual, linhaAtual, caminhou);
		} else if (esquerda) {
			caminhou = esquerda(colunaAtual, linhaAtual, caminhou);

		} else {
			throw new Exception("ERRO");
		}
		return caminhou;

	}

	private boolean esquerda(int colunaAtual, int linhaAtual, boolean caminhou) {
		System.out.println("esquerda");

		// cima, baixo, esquerda, direita
		if (podeIrAcima(linhaAtual, colunaAtual)) {
			lab.setRatoLinha(linhaAtual - 1);
		} else if (podeIrAbaixo(linhaAtual, colunaAtual)) {
			lab.setRatoLinha(linhaAtual + 1);
		} else if (podeIrEsquerda(linhaAtual, colunaAtual)) {
			lab.setRatoColuna(colunaAtual - 1);
		} else if (podeIrDireita(linhaAtual, colunaAtual)) {
			lab.setRatoColuna(colunaAtual + 1);
		} else {
			caminhou = false;
			System.out.println("GAME OVER :(");
		}
		return caminhou;
	}

	private boolean direita(int colunaAtual, int linhaAtual, boolean caminhou) {
		System.out.println("direita");

		// cima, baixo, direita esquerda
		if (podeIrAcima(linhaAtual, colunaAtual)) {
			lab.setRatoLinha(linhaAtual - 1);
		} else if (podeIrAbaixo(linhaAtual, colunaAtual)) {
			lab.setRatoLinha(linhaAtual + 1);
		} else if (podeIrDireita(linhaAtual, colunaAtual)) {
			lab.setRatoColuna(colunaAtual + 1);
		} else if (podeIrEsquerda(linhaAtual, colunaAtual)) {
			lab.setRatoColuna(colunaAtual - 1);
		} else {
			caminhou = false;
			System.out.println("GAME OVER :(");
		}
		return caminhou;
	}

	private boolean subir(int colunaAtual, int linhaAtual, boolean caminhou) {
		System.out.println("subiu");

		System.out.println("");
		// direita, esquerda, cima baixo

		if (podeIrDireita(linhaAtual, colunaAtual)) {
			lab.setRatoColuna(colunaAtual + 1);
		} else if (podeIrEsquerda(linhaAtual, colunaAtual)) {
			lab.setRatoColuna(colunaAtual - 1);
		} else if (podeIrAcima(linhaAtual, colunaAtual)) {
			lab.setRatoLinha(linhaAtual - 1);
		} else if (podeIrAbaixo(linhaAtual, colunaAtual)) {
			lab.setRatoLinha(linhaAtual + 1);
		} else {
			caminhou = false;
			System.out.println("GAME OVER :(");
		}
		return caminhou;
	}

	private boolean descer(int colunaAtual, int linhaAtual, boolean caminhou) {
		System.out.println("desceu");

		if (podeIrDireita(linhaAtual, colunaAtual)) {
			lab.setRatoColuna(colunaAtual + 1);
		} else if (podeIrEsquerda(linhaAtual, colunaAtual)) {
			lab.setRatoColuna(colunaAtual - 1);
		} else if (podeIrAbaixo(linhaAtual, colunaAtual)) {
			lab.setRatoLinha(linhaAtual + 1);
		} else if (podeIrAcima(linhaAtual, colunaAtual)) {
			lab.setRatoLinha(linhaAtual - 1);
		} else {
			caminhou = false;
			System.out.println("GAME OVER :(");
		}
		return caminhou;
	}

	private boolean podeIrDireita(int linhaAtual, int colunaAtual) {
		if (lab.getPosicao(linhaAtual, colunaAtual + 1).caminhavel()) {
			return true;
		}
		return false;
	}

	private boolean podeIrEsquerda(int linhaAtual, int colunaAtual) {
		if (lab.getPosicao(linhaAtual, colunaAtual - 1).caminhavel()) {
			return true;
		}
		return false;
	}

	private boolean podeIrAbaixo(int linhaAtual, int colunaAtual) {
		if (lab.getPosicao(linhaAtual + 1, colunaAtual).caminhavel()) {
			return true;
		}
		return false;
	}

	private boolean podeIrAcima(int linhaAtual, int colunaAtual) {
		if (lab.getPosicao(linhaAtual - 1, colunaAtual).caminhavel()) {
			return true;
		}
		return false;
	}
}
